.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "git-hosting-backup" "1" "" "Version Latest" "Backing up Git Hosted Repo"
.hy
.SH DESCRIPTION
.PP
This \f[V]git-hosting-backup\f[R] command back up Git repositories: *
from \f[V]GitHub\f[R] * to a Rclone
destination (https://rclone.org/overview/) * as a Git
bundle (https://git-scm.com/book/en/v2/Git-Tools-Bundling)
.SS Example
.SS Backup Github Repos to S3
.PP
To back up your repositories: * from github * to s3 * excluding the repo
\f[V]site-com-datacadamia\f[R] you would execute:
.IP
.nf
\f[C]
docker run \[rs]
  --name git-hosting-backup \[rs]
  --rm \[rs]
  --user 1000:1000 \[rs]
  -v \[ti]/.ssh:/home/me/.ssh \[rs]
  -e GIT_X_BKP_GITHUB_TOKEN= \[rs]
  -e GIT_X_BKP_S3_PLATFORM=rclone \[rs]
  -e GIT_X_BKP_S3_RCLONE_BASE_PATH=git-backup \[rs]
  -e RCLONE_CONFIG_S3_TYPE=s3 \[rs]
  -e RCLONE_CONFIG_S3_PROVIDER=IDrive \[rs]
  -e RCLONE_CONFIG_S3_ENDPOINT=h0k0.ca.idrivee2-22.com \[rs]
  -e RCLONE_CONFIG_S3_SECRET_ACCESS_KEY= \[rs]
  -e RCLONE_CONFIG_S3_ACCESS_KEY_ID= \[rs]
  -e RCLONE_CONFIG_S3_NO_CHECK_BUCKET=true \[rs]
  -e RCLONE_CONFIG_S3_SERVER_SIDE_ENCRYPTION=aws:kms \[rs]
  ghcr.io/gerardnico/git-x:latest \[rs]
  git-hosting-backup github s3 --filter-exclude-pattern=site-com-datacadamia
\f[R]
.fi
.SS Backup Github Repos to SFTP Bunny
.PP
To back up your repositories: * from github * to Bunny with Rclone
SFTP (https://rclone.org/sftp/) * excluding the repo
\f[V]site-com-datacadamia\f[R] you would execute:
.IP
.nf
\f[C]
docker run \[rs]
  --name git-backup \[rs]
  --rm \[rs]
  --user 1000:1000 \[rs]
  -v \[ti]/.ssh:/home/me/.ssh \[rs]
  -e GIT_X_BKP_GITHUB_TOKEN= \[rs]
  -e GIT_X_BKP_BUNNY_PLATFORM=rclone \[rs]
  -e RCLONE_INPLACE=1 \[rs]
  -e RCLONE_SIZE_ONLY=1 \[rs]
  -e RCLONE_CONFIG_BUNNY_TYPE=sftp \[rs]
  -e RCLONE_CONFIG_BUNNY_HOST=storage.bunnycdn.com \[rs]
  -e RCLONE_CONFIG_BUNNY_ENDPOINT=h0k0.ca.idrivee2-22.com \[rs]
  -e RCLONE_CONFIG_BUNNY_USER=git-backup \[rs]
  -e RCLONE_CONFIG_BUNNY_PASS=GIT_BACKUP_BUNNY_PASS \[rs]
  ghcr.io/gerardnico/git-x:latest \[rs]
  git-hosting-backup github bunny --filter-exclude-pattern=site-com-datacadamia
\f[R]
.fi
.PP
Note that: * \f[V]RCLONE_INPLACE=1\f[R] is needed because Bunny does not
support
renaming (https://support.bunny.net/hc/en-us/articles/360020400891-I-am-unable-to-rename-files-using-FTP)
Leading to error such as
\f[V]partial file rename failed: Move Rename failed: sftp: \[dq]Internal server error.\[dq] (SSH_FX_FAILURE)\f[R]
* \f[V]RCLONE_SIZE_ONLY=1\f[R] is needed because Bunny does not support
modification time update.
.SH Example Explanation
.PP
The command executed is:
.IP
.nf
\f[C]
git-hosting-backup github s3 --filter-exclude-pattern=site-com-datacadamia
\f[R]
.fi
.PP
where: * \f[V]backup\f[R] is the command * \f[V]github\f[R] is the
service defined by the following \f[V]GIT_X_BKP_SERVICE_NAME_xxx\f[R]
envs)
.IP
.nf
\f[C]
GIT_X_BKP_GITHUB_PLATFORM=github # platform type (optional as it defaults to the name)
GIT_X_BKP_GITHUB_TOKEN=GITHUB_TOKEN # API Token 
\f[R]
.fi
.IP \[bu] 2
\f[V]s3\f[R] is the target defined by the following
\f[V]GIT_X_BKP_PLATFORM_NAME_xxx\f[R] envs
.IP
.nf
\f[C]
GIT_X_BKP_S3_PLATFORM=rclone # rclone 
GIT_X_BKP_S3_RCLONE_REMOTE_NAME=s3 # optional remote name, by default, the target registry name (only characters and _ as this an env), 
GIT_X_BKP_S3_RCLONE_BASE_PATH=git-backup # the base path (in our s3 case, the bucket name)
\f[R]
.fi
.IP \[bu] 2
\f[V]--filter-exclude-pattern=xxx\f[R] is a regexp pattern that if the
expression matches the full name repository (\f[V]workspace/name\f[R])
will exclude it from backup
.PP
The rclone remote name is configured via the native rclone environment
variable (https://rclone.org/docs/#environment-variables).
ie \f[V]RCLONE_CONFIG_REMOTE_NAME_XXX\f[R]
.IP
.nf
\f[C]
# in our case the GIT_BACKUP remote name was defined via the env \[ga]GIT_X_BKP_S3_RCLONE_REMOTE_NAME=git_backup\[ga]
RCLONE_CONFIG_S3_TYPE=s3
RCLONE_CONFIG_S3_PROVIDER=IDrive
RCLONE_CONFIG_S3_ENDPOINT=h0k0.ca.idrivee2-22.com
RCLONE_CONFIG_S3_SECRET_ACCESS_KEY=GIT_BACKUP_SECRET_KEY
RCLONE_CONFIG_S3_ACCESS_KEY_ID=GIT_BACKUP_ACCESS_KEY
RCLONE_CONFIG_S3_NO_CHECK_BUCKET=true
RCLONE_CONFIG_S3_SERVER_SIDE_ENCRYPTION=aws:kms
\f[R]
.fi
.IP \[bu] 2
The env below mount your SSH directory for a GitHub authentication
.IP
.nf
\f[C]
--user 1000:1000 \[rs]
-v \[ti]/.ssh:/home/me/.ssh
\f[R]
.fi
.SH Prerequisites
.IP \[bu] 2
SSH Authentication:
.RS 2
.IP \[bu] 2
An SSH private key in your \f[V]\[ti]/.ssh\f[R] directory.
ie Generate a
key (https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent)
.IP \[bu] 2
With the corresponding public key added to
GitHub (https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)
.RE
.IP \[bu] 2
A GitHub API
Token (https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens)
known as Personal Access Token or PAT
.RS 2
.IP \[bu] 2
with the scope \f[V]repo\f[R] for public and private repo
.RE
.IP \[bu] 2
A Rclone destination (https://rclone.org/overview/)
.IP \[bu] 2
The dependencies
.SH How to restore
.PP
A bundle (https://git-scm.com/book/en/v2/Git-Tools-Bundling) can be
cloned.
.IP
.nf
\f[C]
git clone /path/to/repo.bundle
# or
git clone https://host/path/to/repo.bundle
\f[R]
.fi
.SH Backup processing explained
.PP
The backup processing implemented in the \f[V]backup\f[R] function of
the git-backup script is: * Store the start time and get the last backup
time * Get the repos via API and loop over them * Skip the backup if: *
the last pushed time of the repo is earlier than the last backup (and if
a backup exist) * the repository is empty * the repository is a fork *
Otherwise, backup with the following commands:
.IP
.nf
\f[C]
# git clone a mirror repository locally
git clone --mirror REPO_SSH_URL CLONE_TARGET_DIR
# create a bundle
git bundle create BUNDLE_SOURCE_PATH --all
# upload the bundle to \[ga]workspace/repository_name\[ga]
rclone moveto BUNDLE_SOURCE_PATH BUNDLE_TARGET_PATH --progress
\f[R]
.fi
.IP \[bu] 2
Repeat for another repo
.IP \[bu] 2
Delete the start time
.IP \[bu] 2
Write the last time with the start time
.IP \[bu] 2
End
.SH Tip: How to sync between 2 git registries
.PP
The Gickup
application (https://cooperspencer.github.io/gickup-documentation/) is
more suited for that.
.SH Why do you choose SSH over Personal Access Token for Github
.PP
That\[cq]s the easiest way to login.
.PP
Note that AskPass or a helper may be used to pass the token as stated in
the doc (https://git-scm.com/docs/gitcredentials), but it\[cq]s not yet
implemented
.PP
The \f[V]Personal Access Token (PAT)\f[R] should not be used in a Basic
Auth URL as this URL is stored
.IP
.nf
\f[C]
https://user:/github.com/parent/repo
\f[R]
.fi
.SH Kubernetes
.PP
In the \f[V]command\f[R] property of a container, you should use the
entrypoint to create the \f[V]host_known\f[R] file with GitHub SSH keys
and avoid the error: \f[V]Host key verification failed\f[R]
.PP
Example:
.IP
.nf
\f[C]
command: [ \[dq]git-multi-docker-entrypoint\[dq] ]
args: [ \[dq]git-backup\[dq], \[dq]backup\[dq], \[dq]github\[dq], \[dq]s3\[dq], \[dq]--filter-exclude-pattern=site-com-datacadamia\[dq], \[dq]--restart\[dq] ]
\f[R]
.fi
.SH Dependencies
.PP
We use the following dependencies are * Date from coreutils mandatory *
git * openssh * curl
