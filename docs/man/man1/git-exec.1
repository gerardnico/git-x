.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "git-exec" "1" "" "Version Latest" "git-exec"
.hy
.SH NAME
.PP
Execute a git command against multiple local repositories at once
.SH DESCRIPTION
.PP
Execute a git command against local repositories
.SH EXAMPLE
.IP \[bu] 2
Shows the status of all dirty repositories
.IP
.nf
\f[C]
git exec status --short
\f[R]
.fi
.IP \[bu] 2
Shows the status of all repositories
.IP
.nf
\f[C]
git exec -f status --short
\f[R]
.fi
.IP \[bu] 2
\f[V]Add, Commit and Push\f[R] on all repositories
.IP
.nf
\f[C]
git exec auto-commit
\f[R]
.fi
.IP \[bu] 2
Perform a commit only again the \f[V]my-repo\f[R] repository
.IP
.nf
\f[C]
git exec my-repo commit -m \[dq]My Commit\[dq]
\f[R]
.fi
.SH CONF / ENV
.PP
You can define the location of the Git repositories with the following
environment variables:
.IP \[bu] 2
\f[V]GIT_X_REPOS_DIR\f[R]: A directory where all sub-repositories are
git repositories
.IP \[bu] 2
\f[V]GIT_X_REPOS_FILE\f[R]: A file where each line is a path to a
repository
.IP \[bu] 2
\f[V]GIT_X_REPOS_PATH\f[R]: A path environment variable where each path
is a git repository path separated by a colon.
.PP
Example in \f[V].bashrc\f[R]
.IP
.nf
\f[C]
# All repositories are cloned in $HOME/code 
export GIT_X_REPOS_DIR=$HOME/code
# Add an extra repo such as the Homebrew tap repo and another 
export GIT_X_REPOS_PATH=/home/linuxbrew/.linuxbrew/Homebrew/Library/Taps/gerardnico/homebrew-tap:/path/to/another-repo
# Define the paths in a file (one path by line)
export GIT_X_REPOS_DIR=$HOME/conf/git-x-repo.txt
\f[R]
.fi
.PP
where \f[V]git-x-repo.txt\f[R] is a file with one path by line.
Example:
.IP
.nf
\f[C]
/path/to/my-first-repo
/path/to/my-second-repo
\f[R]
.fi
.SH SYNOPSIS
.IP
.nf
\f[C]
git exec [-f|--force] [repo name] <git sub-command>
\f[R]
.fi
.PP
where: * \f[V]-f\f[R] or \f[V]--force\f[R] will force the execution
against all repositories (not only the dirty ones) *
\f[V]repo name\f[R], optional when specified the command will execute
only against this repository (the \f[V]repo name\f[R] is the name of the
directory) * \f[V]git sub-command\f[R] is any git sub-command such as
\f[V]clone\f[R], \f[V]push\f[R], \&...
.SH TIP
.PP
You can add it as alias in your \f[V]\[ti].gitconfig\f[R]
.IP
.nf
\f[C]
[alias]
gx = \[dq]!git-exec\[dq]
\f[R]
.fi
.SH MODE OF EXECUTION
.PP
By default, \f[V]git exec\f[R] will execute only against a
\f[V]dirty\f[R] repository.
.PP
A dirty repository is a repository that has: * commits not pushed *
files modified (in the index)
.PP
To execute the git command against: * all repositories, you need to
force it with the \f[V]-f\f[R] or \f[V]--force\f[R] option * one
repository, you need to pass the repository as first argument.
