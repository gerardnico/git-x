#!/bin/bash
# @name Git Exec
# @brief Execute a git command against multiple local repositories at once


set -Eeuo pipefail
# shellcheck source=../..//bash-lib/lib/bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_trap
# shellcheck source=../..//bash-lib/lib/bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"
# shellcheck source=../..//bash-lib/lib/bashlib-git.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-git.sh"
# shellcheck source=../..//bash-lib/lib/bashlib-string.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-string.sh"
# shellcheck source=../..//bash-lib/lib/bashlib-path.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-path.sh"


function synopsis(){

  cat <<EOF
\`\`\`bash
git exec [-f|--force] [repo name] <git sub-command>
\`\`\`
where:
* \`-f\` or \`--force\` will force the execution against all repositories (not only the dirty ones)
* \`repo name\`, optional when specified the command will execute only against this repository (the \`repo name\` is the name of the directory)
* \`git sub-command\` is any git sub-command such as \`clone\`, \`push\`, ...
EOF

}

# Doc Synopsis
if [ "${1:-}" = "synopsis" ]; then
  synopsis
  exit 0
fi

# Help
if [[ "${1:-}" =~ -h|--help|help ]]; then
  doc::help synopsis
  exit 0
fi

REPO_DIRS=()

# Git Directory to checkout may be in a config file
GIT_X_REPOS_FILE=${GIT_X_REPOS_FILE:-}
if [ "$GIT_X_REPOS_FILE" != "" ] && [ -f "$GIT_X_REPOS_FILE" ]; then
  IFS=$'\n' read -r -a REPO_DIRS -d $'\c0' <"$GIT_X_REPOS_FILE"
  echo::info "${#REPO_DIRS[*]} directory found in $GIT_X_REPOS_FILE"
fi

# Path
GIT_X_REPOS_PATH=${GIT_X_REPOS_PATH:-}
if [ "$GIT_X_REPOS_PATH" != "" ]; then
{
  IFS=":" # Set the internal field separator to a colon, but only for the code inside the braces
  for REPO_PATH in $GIT_X_REPOS_PATH
  do
    REPO_DIRS=()
    if [ -d "$REPO_PATH/.git" ]; then
      REPO_DIRS+=("$REPO_PATH")
    else
      echo::warn "The path $REPO_PATH defined in GIT_X_REPOS_PATH is not a git repository"
    fi
  done
}
fi



# The root directory where all repository may be the children
GIT_X_REPOS_DIR=${GIT_X_REPOS_DIR:-}


# Execution mode
MODE_FORCE="all" # Perform the command on all repo even if the repo is not dirty
MODE_DIRTY="dirty" # Files has been touched or commit not pushed
MODE="$MODE_DIRTY" # default

# First Arg
FIRST_ARG=${1:-}
if [ "$FIRST_ARG" == "" ]; then
  doc::help synopsis
  echo::err "An argument is mandatory"
  exit 1
fi

# Force flag
if [[ "$FIRST_ARG" =~ -f|--force ]]; then
  MODE=$MODE_FORCE
  shift
fi

# Perform only on one repo
FIRST_ARG=$1
REPO_DIR="$GIT_X_REPOS_DIR/$FIRST_ARG"
if [ -d "$REPO_DIR/.git" ]; then
    REPO_DIRS+=("$REPO_DIR")
    MODE=$MODE_FORCE
    shift
else
  for GITX_REPO_DIR in "$GIT_X_REPOS_DIR"/*; do
    if [ -d "$GITX_REPO_DIR/.git" ]; then
      REPO_DIRS+=("$GITX_REPO_DIR")
    fi
  done
fi

if [ ${#REPO_DIRS[*]} == 0 ]; then
  echo::err "No Git repositories found with the following env:";
  echo::err ""
  echo::err "     GIT_X_REPOS_DIR=${GIT_X_REPOS_DIR:-}"
  echo::err "     GIT_X_REPOS_FILE=${GIT_X_REPOS_FILE:-}"
  echo::err ""
  echo::err "GIT_X_REPOS_FILE is the path of a file that contains a list of directories containing git repositories"
  echo::err "GIT_X_REPOS_DIR is the path of a home directory where all your git repositories are located"
  exit 1
fi


COMMAND=$(git::get_eval_string "$@")

for REPO_DIR in "${REPO_DIRS[@]}"; do

  pushd "$REPO_DIR" >/dev/null

  # Header for each repo
  DIRECTORY_NAME=$(path::get_current_directory_name) # the directory name is the DIRECTORY_NAME
  HEAD=$(string::set_color "yellow" "${DIRECTORY_NAME}")
  CURRENT_BRANCH=$(git::get_current_branch)
  if ! CURRENT_BRANCH_UPSTREAM=$(git::get_current_upstream_branch &>/dev/null); then
    echo::echo ""
    echo::echo "$HEAD"
    echo::warn "The branch $CURRENT_BRANCH has no upstream. Skipping"
    popd >/dev/null
    continue
  fi

  # If a batch exec, skip the non-dirty repo
  if ! git::is_dirty && [ "$MODE" == "$MODE_DIRTY" ]; then
      popd > /dev/null
      continue
  fi

  # We echo the head before the execution
  # because we may have warning/error that goes to tty
  # We need to be able to connect them to the good repo
  echo::echo ""
  echo::echo "$HEAD (${CURRENT_BRANCH} ... ${CURRENT_BRANCH_UPSTREAM})"

  # 2>&1 because git output all to 2
  if ! OUTPUT=$(eval "$COMMAND" 2>&1); then
    echo::err "The command (${COMMAND}) has errors:"
    echo::err "$OUTPUT"
    popd > /dev/null
    continue
  fi

  # one echo to be able to capture the output
  echo "$OUTPUT"

  popd >/dev/null

done

if [ "$MODE" == "$MODE_DIRTY" ]; then
  echo::echo ""
  echo::tip "Mode of execution was to run the command only on dirty repository (working tree not clean)"
  echo::tip "Use the flag -f to run the command on all repos. ie"
  echo::tip ""
  echo::tip "      git exec -f $*"
  echo::tip ""
fi

if [[ ${COMMAND} == 'status' ]]; then
  # As stated: https://git-scm.com/docs/git-ls-files#Documentation/git-ls-files.txt--t
  cat <<EOF
--------------------------------------------------------------
Legend File Status:
A - untracked new file (staged, in next commit)
H - tracked file that is not either unmerged or skip-worktree
S - tracked file that is skip-worktree
M - tracked file that is unmerged (may be or not staged, ie in the next commit)
R - tracked file with unstaged removal/deletion
C - tracked file with unstaged modification/change
K - untracked paths which are part of file/directory conflicts which prevent checking out tracked files
? - untracked file
U - file with resolve-undo information
EOF
fi

