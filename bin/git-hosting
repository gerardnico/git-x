#!/bin/bash
# @name Git Service
# @brief Execute a command against a Git Hosting Service

set -Eeuo pipefail
# shellcheck source=../..//bash-lib/lib/bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_trap
# shellcheck source=../..//bash-lib/lib/bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"
# shellcheck source=../..//bash-lib/lib/bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"


CLI_NAME=$(basename "$0") # Name of the cli



function synopsis(){
  cat <<EOF
\`\`\`bash
$(basename "$0") command [argument ...] [--option[=value] ...]
\`\`\`
  where command is one of:
  * \`list\`     - list the repositories of a Git Hosting Service
  * \`backup\`   - backup the repositories of a Git Hosting Service
  * \`mount\`    - mount a rclone target as file system
EOF
}

function help_mount() {

  FUNCTION_NAME="mount"
  echo ""
  echo "Usage of the $FUNCTION_NAME command of ${CLI_NAME}"
  echo ""
  echo "   ${CLI_NAME} $FUNCTION_NAME git_registry [--silent] [--unmount] [--daemon]"
  echo ""
  echo "where:"
  echo "     * target                  - the target name to read from"
  echo "     * --silent                - a boolean option that will output only the API_REPOS"
  echo "     * --unmount               - unmount"
  echo "     * --daemon                - put rclone process in the background"
  echo "     * --help                  - this help"
  echo ""

}

function help_list() {

  FUNCTION_NAME="list"
  echo ""
  echo "Usage of the $FUNCTION_NAME command of ${CLI_NAME}"
  echo ""
  echo "   ${CLI_NAME} $FUNCTION_NAME git_hosting_service [xxx]"
  echo ""
  echo "where:"
  echo "     * git_hosting_service         - the git hosting name to read from (github, gogs, ...)"
  echo "     * --silent                    - a boolean option that will output only the API_REPOS"
  echo "     * --jq-raw-output             - a boolean option that will not output the output as json"
  echo "     * --jq-expression='xxxx'      - the jq expression to parse the JSON API response"
  echo "     * --report=value              - the name of a preconfigured report where the value may be:"
  echo "                                     * ls       - the repo fullname separated by the IFS character"
  echo "                                     * asis     - the full json"
  echo "                                     * csv      - a csv"
  echo "     * --filter-max-repo-count='x' - the maximum number of repositories to retrieve"
  echo "     * --help                      - this help"
  echo ""

}





######################################
# Mount/unmount a rclone git registry
# We don't use it anymore
#####################################
function mount(){

  local RCLONE_MOUNTED_PATH=/tmp/rclone
  mkdir -p $RCLONE_MOUNTED_PATH

  local FUNCTION_NAME=mount
  local SILENT_OPTION=""
  local GIT_HOSTING=""
  local FUSE_ACTION="mount"
  local RCLONE_PROCESS_MODE="inline"
  for arg in "$@"; do
          case "$arg" in
          "--silent"|"-s")
            SILENT_OPTION="silent"
            ;;
          "--unmount")
            FUSE_ACTION="unmount"
            ;;
          "--daemon")
            RCLONE_PROCESS_MODE="daemon"
            ;;
          "")
            # empty arg
          ;;
          "--help"|"-h")
            help_mount
            exit
          ;;
          *)
            if [ "$GIT_HOSTING" == "" ]; then
                GIT_HOSTING="$arg"
              else
                echo::err "$FUNCTION_NAME: Only one argument is supported. ($arg) is the second argument"
                exit 1
            fi
            ;;
          esac
  done

  # Unmount
  if [ "$FUSE_ACTION" == "unmount" ]; then

    echo::info "$FUNCTION_NAME: Unmounting $RCLONE_MOUNTED_PATH"
    # Force
    umount --force $RCLONE_MOUNTED_PATH

    # Fusermount does not exist on alpine
    # Otherwise it would have been:
    # fusermount -u $RCLONE_MOUNTED_PATH
    return;

  fi

  if [ "$GIT_HOSTING" == "" ]; then
      echo::err "$FUNCTION_NAME: A Git registry name is needed as first argument "
      exit 1
  fi

  set_rclone_env  $GIT_HOSTING

  echo::info "$FUNCTION_NAME: Mount Rclone $GIT_HOSTING at $RCLONE_MOUNTED_PATH"

  RCLONE_COMMAND="rclone mount $RCLONE_REMOTE_NAME:$RCLONE_BASE_PATH $RCLONE_MOUNTED_PATH"
  if [ $RCLONE_PROCESS_MODE == "daemon" ]; then
    RCLONE_COMMAND="$RCLONE_COMMAND --daemon"
  fi;
  echo::info "$FUNCTION_NAME: Executing the command: $RCLONE_COMMAND"
  eval "$RCLONE_COMMAND"

  echo::info "$FUNCTION_NAME: Rclone $GIT_HOSTING mounted at $RCLONE_MOUNTED_PATH"

}

function set_env(){

    local FUNCTION_NAME="set-env"

    local SILENT_OPTION=""

    # The prefix for our env
    local ENV_PREFIX="GIT_X_BKP"

    # The registry is an unique name
    # that identifies a Git Server instance
    GIT_HOSTING=""

    # This for loop should have no echo
    # Why? We use this function to get the list of repo to handle
    # We therefore need the raw output without any echo
    for arg in "$@"; do
        case "$arg" in
        "")
          # empty arg
          ;;
        "--silent")
          SILENT_OPTION="--silent"
          ;;
        *)
          # Command or arg
          if [ "$GIT_HOSTING" == "" ]; then
              GIT_HOSTING="${arg^^}" # ^^ for uppercase
            else
              echo::err "$FUNCTION_NAME: Too much argument found: $FUNCTION_NAME except only one argument, the instance. ($arg) is the second argument"
              exit 1;
          fi
          shift
          ;;
        esac
    done

    if [ "$GIT_HOSTING" == "" ]; then
      echo::err "The Git Registry should be not empty"
      exit 1;
    fi

    echo::info  "Setting env for Git Instance: $GIT_HOSTING"



    # Target
    GIT_PLATFORM_ENV_NAME="${ENV_PREFIX}_${GIT_HOSTING}_PLATFORM"
    if [ -z "${!GIT_PLATFORM_ENV_NAME+x}" ]; then
      # PLATFORM/Registry Type type not found
      # Well-Known registry
      case $GIT_HOSTING in
        "GITHUB")
          GIT_PLATFORM="github"
          ;;
        *)
          echo::err "Environment variable '$GIT_PLATFORM_ENV_NAME' does not exist."
          exit 1
          ;;
      esac
    else
      GIT_PLATFORM=${!GIT_PLATFORM_ENV_NAME}
    fi
    echo::info  "$FUNCTION_NAME:  * Platform: $GIT_PLATFORM"

    # Domain
    GIT_DOMAIN=""
    GIT_DOMAIN_ENV_NAME="${ENV_PREFIX}_${GIT_HOSTING}_DOMAIN"
    if [ -z "${!GIT_DOMAIN_ENV_NAME+x}" ]; then
      case ${GIT_PLATFORM} in
        github)
          GIT_DOMAIN="github.com"
          ;;
        gogs)
          echo::err "Environment variable '$GIT_DOMAIN_ENV_NAME' is mandatory for gogs"
          exit 1
          ;;
        *)
          # Local registry does not have any domain
          ;;
        esac
    else
      GIT_DOMAIN=${!GIT_DOMAIN_ENV_NAME}
    fi
    echo::info  "$FUNCTION_NAME:  * Domain: $GIT_DOMAIN"

    # API Access Token
    GIT_TOKEN_ENV_NAME="${ENV_PREFIX}_${GIT_HOSTING}_TOKEN"
    if [ -z "${!GIT_TOKEN_ENV_NAME+x}" ]; then
        unset GIT_TOKEN;
        echo::warn  "$FUNCTION_NAME:  * Api Token: Variable ($GIT_TOKEN_ENV_NAME) not found"
      else
        GIT_TOKEN=${!GIT_TOKEN_ENV_NAME}
        echo::info  "$FUNCTION_NAME:  * Api Token: Found"
    fi;

}

# Set the configuration via env
# Conf via env variables
# https://rclone.org/docs/#environment-variables
function set_rclone_env(){

    local FUNCTION_NAME="set_rclone_env"

    # to avoid: NOTICE: Config file "/home/me/.rclone.conf" not found - using defaults
    touch "$HOME"/.rclone.conf

    # The registry is an unique name
    # that identifies a Git Server instance
    GIT_HOSTING=""

    local SILENT_OPTION=""

    # This for loop should have no echo
    # Why? We use this function to get the list of repo to handle
    # We therefore need the raw output without any echo
    for arg in "$@"; do
        case "$arg" in
        "")
          # empty arg
          ;;
        "--silent")
          SILENT_OPTION="--silent"
          ;;
        *)
          # Command or arg
          if [ "$GIT_HOSTING" == "" ]; then
              GIT_HOSTING="${arg^^}" # ^^ for uppercase
            else
              echo::err "$FUNCTION_NAME: Too much argument found: $FUNCTION_NAME except only one argument, a git registry. ($arg) is the second argument"
              exit 1;
          fi
          shift
          ;;
        esac
    done

    if [ "$GIT_HOSTING" == "" ]; then
      echo::err "$FUNCTION_NAME: The first argument should be not empty with the git instance name"
      exit 1;
    fi

    set_env  "$GIT_HOSTING"

    # Rclone specific
    RCLONE_REMOTE_NAME_ENV_NAME="${ENV_PREFIX}_${GIT_HOSTING}_RCLONE_REMOTE_NAME"
    if [ -z "${!RCLONE_REMOTE_NAME_ENV_NAME+x}" ]; then
        RCLONE_REMOTE_NAME=${GIT_HOSTING}
        echo::info  "$FUNCTION_NAME:  * Env variable ($RCLONE_REMOTE_NAME_ENV_NAME) was not found. Setting Rclone remote name to the Git Registry: ${GIT_HOSTING}"
      else
        RCLONE_REMOTE_NAME=${!RCLONE_REMOTE_NAME_ENV_NAME}
    fi;
    echo::info  "$FUNCTION_NAME:  * Rclone remote Name: $RCLONE_REMOTE_NAME"

    RCLONE_BASE_PATH_ENV_NAME="${ENV_PREFIX}_${GIT_HOSTING}_RCLONE_BASE_PATH"
    if [ -z "${!RCLONE_BASE_PATH_ENV_NAME+x}" ]; then
        echo::info  "$FUNCTION_NAME:  * Env variable ($RCLONE_BASE_PATH_ENV_NAME) was not found. Setting to empty string"
        RCLONE_BASE_PATH=""
      else
        RCLONE_BASE_PATH=${!RCLONE_BASE_PATH_ENV_NAME}
        echo::info  "$FUNCTION_NAME:  * Rclone base path: $RCLONE_BASE_PATH"
    fi;

}


######################################
# List repo for a git provider
#####################################
function list_repo(){
  echo "Args: $*"
  local GIT_HOSTING=""
  # Report are default value for JQ expression
  local REPORT=""
  # The default Jq args are platform dependent
  local JQ_EXPRESSION=""
  local JQ_RAW_OUTPUT_OPTION=""

  args=$(getopt -l "jq-expression:,filter-max-repo-count:,jq-raw-output,jq-raw,help,report:" -o "r:h" -- "$@")
  eval set -- "$args"
  # The maximum of repo to retrieved
  local FILTER_MAX_REPO_COUNT=""
  # This for loop should have no echo
  # Why? We use this function to get the list of repo to handle
  # We therefore need the raw output without any echo
  while [[ $# -gt 0 ]]
  do
     case "$1" in
         "--jq-expression")
            shift
            JQ_EXPRESSION="$1"
            shift
           ;;
         "--filter-max-repo-count")
            shift
            FILTER_MAX_REPO_COUNT="$1"
            shift
           ;;
         "--jq-raw-output"|"--jq-raw")
            JQ_RAW_OUTPUT_OPTION="--raw-output"
            shift
           ;;
         "--report"|"-r")
            shift
            REPORT="$1"
            shift
           ;;
         "--help"|"-h")
           help_list
           exit
           ;;
          "--")
            # The arg separator
            shift
            ;;
          *)
            if [ "$GIT_HOSTING" == "" ]; then
                GIT_HOSTING="$1"
                shift
                continue
            fi

            echo::err "Too much argument found: list except only one argument, the registry. ($1) is the second argument"
            exit 1;

           ;;
     esac
  done

  if [ "$GIT_HOSTING" = "" ]; then
    help_list
    echo::err "The git hosting service name is mandatory"
    exit 1
  fi

  set_env "$GIT_HOSTING" 

  # Report
  # Report are default values
  if [ "${REPORT}" == "" ]; then
    REPORT="default"
    echo::info "No Report found, set to: $REPORT"
  else
    echo::info "Report: $REPORT"
  fi

  case ${GIT_PLATFORM} in
  gogs)

    # Auth Token
    if [ -z "${GIT_TOKEN+x}" ]; then
      echo::err "Git Token is mandatory to list repo for $GIT_PLATFORM"
      exit 1
    fi

    case ${REPORT} in
      "ls")
        JQ_EXPRESSION_REPORT="map(.full_name) | join(\"$IFS\")"
        JQ_RAW_OUTPUT_OPTION="--raw-output"
        ;;
      "asis")
        JQ_EXPRESSION_REPORT='.'
        JQ_RAW_OUTPUT_REPORT_OPTION=""
        ;;
      "default")
        JQ_EXPRESSION_REPORT='[.[] | .full_name]'
        JQ_RAW_OUTPUT_REPORT_OPTION=""
        ;;
      "csv")
        JQ_EXPRESSION_REPORT='["full_name", "fork"], (.[] | [.full_name, .fork]) | @csv'
        JQ_RAW_OUTPUT_OPTION="--raw-output"
        ;;
      *)
        echo::err "$FUNCTION_NAME: The report ($REPORT) is unknown"
        exit 1;
      ;;
    esac

    # Jq arguments
    if [ "${JQ_EXPRESSION}" == "" ]; then
        JQ_EXPRESSION=${JQ_EXPRESSION_REPORT}
    fi
    echo::info  "$FUNCTION_NAME: Jq Expression: $JQ_EXPRESSION"
    if [ "${JQ_RAW_OUTPUT_OPTION}" == "" ]; then
        JQ_RAW_OUTPUT_OPTION=${JQ_RAW_OUTPUT_REPORT_OPTION}
    fi
    echo::info  "$FUNCTION_NAME: Jq Raw Output Option: $JQ_RAW_OUTPUT_OPTION"

    # URL AI
    URL_API="https://$GIT_DOMAIN/api/v1/user/repos"
    echo::info  "$FUNCTION_NAME: Requesting $URL_API"

    # Execute
    echo  ""
    # $JQ_RAW_OUTPUT_OPTION should not be quoted because jq does not accept empty string argument
    # shellcheck disable=SC2086
    curl -sS -H "Authorization: token $GIT_TOKEN" "$URL_API" | jq $JQ_RAW_OUTPUT_OPTION "${JQ_EXPRESSION}"
    echo  ""
    ;;
  github)

      # Auth Token
      if [ -z "${GIT_TOKEN+x}" ]; then
        echo::err "Git Token is mandatory to list repo for $GIT_PLATFORM"
        exit 1
      fi

      case ${REPORT} in
        "ls")
          JQ_EXPRESSION_REPORT="map(.full_name) | join(\"$IFS\")"
          JQ_RAW_OUTPUT_OPTION="--raw-output"
          ;;
        "asis")
          JQ_EXPRESSION_REPORT='.'
          JQ_RAW_OUTPUT_REPORT_OPTION=""
          ;;
        "default")
          JQ_EXPRESSION_REPORT='[.[] | .full_name]'
          JQ_RAW_OUTPUT_REPORT_OPTION=""
          ;;
        "csv")
          JQ_EXPRESSION_REPORT='["full_name", "fork", "clone_url"], (.[] | [.full_name, .fork, .clone_url]) | @csv'
          JQ_RAW_OUTPUT_OPTION="--raw-output"
          ;;
        *)
          echo::err "$FUNCTION_NAME: The report ($REPORT) is unknown"
          exit 1;
        ;;
      esac

      # Jq arguments
      if [ "${JQ_EXPRESSION}" == "" ]; then
          JQ_EXPRESSION=${JQ_EXPRESSION_REPORT}
      fi
      echo::info  "$FUNCTION_NAME: Jq Expression: $JQ_EXPRESSION"
      if [ "${JQ_RAW_OUTPUT_OPTION}" == "" ]; then
          JQ_RAW_OUTPUT_OPTION=${JQ_RAW_OUTPUT_REPORT_OPTION}
      fi
      echo::info  "$FUNCTION_NAME: Jq Raw Output Option: $JQ_RAW_OUTPUT_OPTION"

      # URL API: repo for the authenticated user
      # Doc: https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-repositories-for-the-authenticated-user
      URL_API="https://api.github.com/user/repos"
      REPO_BY_PAGE=100
      if [ "$FILTER_MAX_REPO_COUNT" != "" ] && [ "$FILTER_MAX_REPO_COUNT" -lt "$REPO_BY_PAGE" ]; then
        REPO_BY_PAGE=$FILTER_MAX_REPO_COUNT
      fi
      ACTUAL_PAGE=1
      TOTAL_COUNT=0
      TOTAL_REPOS='[]'
      while true; do

          REQUEST_URL="$URL_API?per_page=$REPO_BY_PAGE&page=$ACTUAL_PAGE"
          echo::info  "$FUNCTION_NAME: $ACTUAL_PAGE - Requesting $REPO_BY_PAGE repo ($REQUEST_URL)";

          ACTUAL_REPOS=$(curl -sS -H "Authorization: token $GIT_TOKEN" "$REQUEST_URL")
          TOTAL_REPOS=$(jq -s '.[0] + .[1]' <(echo "$TOTAL_REPOS") <(echo "$ACTUAL_REPOS"))

          # Count the number of objects
          COUNT=$(echo "$ACTUAL_REPOS" | jq ". | length")
          # Add the COUNT to the total COUNT
          TOTAL_COUNT=$((TOTAL_COUNT + COUNT))

          # Break on last page
          if [ "$COUNT" -lt "$REPO_BY_PAGE" ]; then
              echo::info  "$FUNCTION_NAME: Retrieved $TOTAL_COUNT repositories";
              break
          fi

          # Break on max count
          if [ "$FILTER_MAX_REPO_COUNT" != "" ] && [ "$TOTAL_COUNT" -ge "$FILTER_MAX_REPO_COUNT" ]; then
              echo::info  "$FUNCTION_NAME: Max total count repositories ($TOTAL_COUNT) reached";
              break
          fi

          ACTUAL_PAGE=$((ACTUAL_PAGE + 1))

      done

      echo::info  "$FUNCTION_NAME: "
      # $JQ_RAW_OUTPUT_OPTION should not be quoted because jq does not accept empty string argument
      # shellcheck disable=SC2086
      echo "$TOTAL_REPOS" | jq $JQ_RAW_OUTPUT_OPTION "${JQ_EXPRESSION}"

      ;;
  *)
    echo::err "The git platform $GIT_PLATFORM is not yet implemented"
    exit 1
    ;;
  esac

}



COMMAND=""

args=$(getopt -l "silent" -o "s" -- "$@")
eval set -- "$args"

# Parsing only the command
# Options are command related and are parsed
# in each function
while [[ $# -gt 0 ]]
do
   case "$1" in
  "--silent"|"-s")
    # error only
    # shellcheck disable=SC2034
    BASHLIB_ECHO_LEVEL=1
    shift
    ;;
  "--")
    # the arg separator
    shift
    ;;
  *)
    # Command or arg
    if [ "$COMMAND" == "" ]; then
        COMMAND="$1"
      else
        ARGUMENTS+=("$1")
    fi
    shift
    ;;
  esac
done

if [ "$COMMAND" == "" ]; then
  doc::help synopsis
  echo::err 'A command is mandatory'
  exit 1
fi

echo::echo ""
echo::echo "${CLI_NAME^} ${COMMAND^}"
echo::echo "-------------------------------------------"
echo::echo ""
case ${COMMAND} in
  "help")
    doc::help synopsis
    ;;
  "synopsis")
    synopsis
    ;;
  "list")
    list_repo "${ARGUMENTS[@]}"
    ;;
  "backup")
    backup "${ARGUMENTS[@]}"
    ;;
  "mount")
    mount "${ARGUMENTS[@]}"
    ;;
  *)
    doc::help synopsis
    echo::err "The command $COMMAND is unknown"
    exit 1
    ;;
esac
