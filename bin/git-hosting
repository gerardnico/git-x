#!/bin/bash
# @name Git Service
# @brief Execute a command against a Git Hosting Service

set -Eeuo pipefail
# shellcheck source=../..//bash-lib/lib/bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_trap
# shellcheck source=../..//bash-lib/lib/bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"
# shellcheck source=../..//bash-lib/lib/bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"


CLI_NAME=$(basename "$0") # Name of the cli



function synopsis(){
  cat <<EOF
\`\`\`bash
$(basename "$0") command [argument ...] [--option[=value] ...]
\`\`\`
  where command is one of:
  * \`list\`     - list the repositories of a Git Hosting Service
  * \`backup\`   - backup the repositories of a Git Hosting Service
  * \`mount\`    - mount a rclone target as file system
EOF
}

function help_mount() {

  FUNCTION_NAME="mount"
  echo ""
  echo "Usage of the $FUNCTION_NAME command of ${CLI_NAME}"
  echo ""
  echo "   ${CLI_NAME} $FUNCTION_NAME git_registry [--silent] [--unmount] [--daemon]"
  echo ""
  echo "where:"
  echo "     * target                  - the target name to read from"
  echo "     * --silent                - a boolean option that will output only the API_REPOS"
  echo "     * --unmount               - unmount"
  echo "     * --daemon                - put rclone process in the background"
  echo "     * --help                  - this help"
  echo ""

}






######################################
# Mount/unmount a rclone git registry
# We don't use it anymore
#####################################
function mount(){

  local RCLONE_MOUNTED_PATH=/tmp/rclone
  mkdir -p $RCLONE_MOUNTED_PATH

  local FUNCTION_NAME=mount
  local SILENT_OPTION=""
  local GIT_HOSTING=""
  local FUSE_ACTION="mount"
  local RCLONE_PROCESS_MODE="inline"
  for arg in "$@"; do
          case "$arg" in
          "--silent"|"-s")
            SILENT_OPTION="silent"
            ;;
          "--unmount")
            FUSE_ACTION="unmount"
            ;;
          "--daemon")
            RCLONE_PROCESS_MODE="daemon"
            ;;
          "")
            # empty arg
          ;;
          "--help"|"-h")
            help_mount
            exit
          ;;
          *)
            if [ "$GIT_HOSTING" == "" ]; then
                GIT_HOSTING="$arg"
              else
                echo::err "$FUNCTION_NAME: Only one argument is supported. ($arg) is the second argument"
                exit 1
            fi
            ;;
          esac
  done

  # Unmount
  if [ "$FUSE_ACTION" == "unmount" ]; then

    echo::info "$FUNCTION_NAME: Unmounting $RCLONE_MOUNTED_PATH"
    # Force
    umount --force $RCLONE_MOUNTED_PATH

    # Fusermount does not exist on alpine
    # Otherwise it would have been:
    # fusermount -u $RCLONE_MOUNTED_PATH
    return;

  fi

  if [ "$GIT_HOSTING" == "" ]; then
      echo::err "$FUNCTION_NAME: A Git registry name is needed as first argument "
      exit 1
  fi

  set_rclone_env  $GIT_HOSTING

  echo::info "$FUNCTION_NAME: Mount Rclone $GIT_HOSTING at $RCLONE_MOUNTED_PATH"

  RCLONE_COMMAND="rclone mount $RCLONE_REMOTE_NAME:$RCLONE_BASE_PATH $RCLONE_MOUNTED_PATH"
  if [ $RCLONE_PROCESS_MODE == "daemon" ]; then
    RCLONE_COMMAND="$RCLONE_COMMAND --daemon"
  fi;
  echo::info "$FUNCTION_NAME: Executing the command: $RCLONE_COMMAND"
  eval "$RCLONE_COMMAND"

  echo::info "$FUNCTION_NAME: Rclone $GIT_HOSTING mounted at $RCLONE_MOUNTED_PATH"

}


# Set the configuration via env
# Conf via env variables
# https://rclone.org/docs/#environment-variables
function set_rclone_env(){

    local FUNCTION_NAME="set_rclone_env"

    # to avoid: NOTICE: Config file "/home/me/.rclone.conf" not found - using defaults
    touch "$HOME"/.rclone.conf

    # The registry is an unique name
    # that identifies a Git Server instance
    GIT_HOSTING=""

    local SILENT_OPTION=""

    # This for loop should have no echo
    # Why? We use this function to get the list of repo to handle
    # We therefore need the raw output without any echo
    for arg in "$@"; do
        case "$arg" in
        "")
          # empty arg
          ;;
        "--silent")
          SILENT_OPTION="--silent"
          ;;
        *)
          # Command or arg
          if [ "$GIT_HOSTING" == "" ]; then
              GIT_HOSTING="${arg^^}" # ^^ for uppercase
            else
              echo::err "$FUNCTION_NAME: Too much argument found: $FUNCTION_NAME except only one argument, a git registry. ($arg) is the second argument"
              exit 1;
          fi
          shift
          ;;
        esac
    done

    if [ "$GIT_HOSTING" == "" ]; then
      echo::err "$FUNCTION_NAME: The first argument should be not empty with the git instance name"
      exit 1;
    fi

    set_env  "$GIT_HOSTING"

    # Rclone specific
    RCLONE_REMOTE_NAME_ENV_NAME="${ENV_PREFIX}_${GIT_HOSTING}_RCLONE_REMOTE_NAME"
    if [ -z "${!RCLONE_REMOTE_NAME_ENV_NAME+x}" ]; then
        RCLONE_REMOTE_NAME=${GIT_HOSTING}
        echo::info  "$FUNCTION_NAME:  * Env variable ($RCLONE_REMOTE_NAME_ENV_NAME) was not found. Setting Rclone remote name to the Git Registry: ${GIT_HOSTING}"
      else
        RCLONE_REMOTE_NAME=${!RCLONE_REMOTE_NAME_ENV_NAME}
    fi;
    echo::info  "$FUNCTION_NAME:  * Rclone remote Name: $RCLONE_REMOTE_NAME"

    RCLONE_BASE_PATH_ENV_NAME="${ENV_PREFIX}_${GIT_HOSTING}_RCLONE_BASE_PATH"
    if [ -z "${!RCLONE_BASE_PATH_ENV_NAME+x}" ]; then
        echo::info  "$FUNCTION_NAME:  * Env variable ($RCLONE_BASE_PATH_ENV_NAME) was not found. Setting to empty string"
        RCLONE_BASE_PATH=""
      else
        RCLONE_BASE_PATH=${!RCLONE_BASE_PATH_ENV_NAME}
        echo::info  "$FUNCTION_NAME:  * Rclone base path: $RCLONE_BASE_PATH"
    fi;

}





COMMAND=""

args=$(getopt -l "silent" -o "s" -- "$@")
eval set -- "$args"

# Parsing only the command
# Options are command related and are parsed
# in each function
while [[ $# -gt 0 ]]
do
   case "$1" in
  "--silent"|"-s")
    # error only
    # shellcheck disable=SC2034
    BASHLIB_ECHO_LEVEL=1
    shift
    ;;
  "--")
    # the arg separator
    shift
    ;;
  *)
    # Command or arg
    if [ "$COMMAND" == "" ]; then
        COMMAND="$1"
      else
        ARGUMENTS+=("$1")
    fi
    shift
    ;;
  esac
done

if [ "$COMMAND" == "" ]; then
  doc::help synopsis
  echo::err 'A command is mandatory'
  exit 1
fi

echo::echo ""
echo::echo "${CLI_NAME^} ${COMMAND^}"
echo::echo "-------------------------------------------"
echo::echo ""
case ${COMMAND} in
  "help")
    doc::help synopsis
    ;;
  "synopsis")
    synopsis
    ;;
  "list")
    git-hosting-list "${ARGUMENTS[@]}" || error::exit $?
    ;;
  "backup")
    backup "${ARGUMENTS[@]}"
    ;;
  "mount")
    mount "${ARGUMENTS[@]}"
    ;;
  *)
    doc::help synopsis
    echo::err "The command $COMMAND is unknown"
    exit 1
    ;;
esac
