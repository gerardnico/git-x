#!/bin/bash
# @name Git Service
# @brief Execute a command against a Git Hosting Service
# @description
#
# List and backup the repositories of a Git Hosting Service
#
# ## SYNOPSIS
#
# ```bash
# git service command [argument ...] [--option[=value] ...]
# ```
# where command is one of:
# * `help`       - this help
# * `list`       - list the repositories of a Git Hosting Service"
# * `backup`     - backup the repositories of a Git Hosting Service"
# * `mount`      - mount a rclone target as file system"
#
#
# To get the help on one command"
# ```bash
# git service command --help"
# ```
#



# flag
set -Eeuo pipefail
source bashlib-echo.sh
source bashlib-error.sh
error::set_trap

CLI_NAME=$(basename "$0") # Name of the cli



######################################
# Env
#####################################
ENV_PREFIX="GIT_X_BKP"

function synopsis(){
  cat <<EOF
\`\`\`bash
$(basename "$0") command [argument ...] [--option[=value] ...]
\`\`\`
  where command is one of:
  * \`list\`     - list the repositories of a Git Hosting Service"
  * \`backup\`   - backup the repositories of a Git Hosting Service"
  * \`mount\`    - mount a rclone target as file system"
EOF
}

function help_mount() {

  FUNCTION_NAME="mount"
  echo ""
  echo "Usage of the $FUNCTION_NAME command of ${CLI_NAME}"
  echo ""
  echo "   ${CLI_NAME} $FUNCTION_NAME git_registry [--silent] [--unmount] [--daemon]"
  echo ""
  echo "where:"
  echo "     * target                  - the target name to read from"
  echo "     * --silent                - a boolean option that will output only the API_REPOS"
  echo "     * --unmount               - unmount"
  echo "     * --daemon                - put rclone process in the background"
  echo "     * --help                  - this help"
  echo ""

}

function help_list() {

  FUNCTION_NAME="list"
  echo ""
  echo "Usage of the $FUNCTION_NAME command of ${CLI_NAME}"
  echo ""
  echo "   ${CLI_NAME} $FUNCTION_NAME git_registry [xxx]"
  echo ""
  echo "where:"
  echo "     * git_registry                - the git registry name to read from"
  echo "     * --silent                    - a boolean option that will output only the API_REPOS"
  echo "     * --jq-raw-output             - a boolean option that will not output the output as json"
  echo "     * --jq-expression='xxxx'      - the jq expression to parse the JSON API response"
  echo "     * --report=value              - the name of a preconfigured report where the value may be:"
  echo "                                     * ls       - the repo fullname separated by the IFS character"
  echo "                                     * asis     - the full json"
  echo "                                     * csv      - a csv"
  echo "     * --filter-max-repo-count='x' - the maximum number of repositories to retrieve"
  echo "     * --help                      - this help"
  echo ""

}





######################################
# Mount/unmount a rclone git registry
# We don't use it anymore
#####################################
function mount(){

  local RCLONE_MOUNTED_PATH=/tmp/rclone
  mkdir -p $RCLONE_MOUNTED_PATH

  local FUNCTION_NAME=mount
  local SILENT_OPTION=""
  local GIT_REGISTRY=""
  local FUSE_ACTION="mount"
  local RCLONE_PROCESS_MODE="inline"
  for arg in "$@"; do
          case "$arg" in
          "--silent"|"-s")
            SILENT_OPTION="silent"
            ;;
          "--unmount")
            FUSE_ACTION="unmount"
            ;;
          "--daemon")
            RCLONE_PROCESS_MODE="daemon"
            ;;
          "")
            # empty arg
          ;;
          "--help"|"-h")
            help_mount
            exit
          ;;
          *)
            if [ "$GIT_REGISTRY" == "" ]; then
                GIT_REGISTRY="$arg"
              else
                echo::err "$FUNCTION_NAME: Only one argument is supported. ($arg) is the second argument"
                exit 1
            fi
            ;;
          esac
  done

  # Unmount
  if [ "$FUSE_ACTION" == "unmount" ]; then

    echo::info "$FUNCTION_NAME: Unmounting $RCLONE_MOUNTED_PATH"
    # Force
    umount --force $RCLONE_MOUNTED_PATH

    # Fusermount does not exist on alpine
    # Otherwise it would have been:
    # fusermount -u $RCLONE_MOUNTED_PATH
    return;

  fi

  if [ "$GIT_REGISTRY" == "" ]; then
      echo::err "$FUNCTION_NAME: A Git registry name is needed as first argument "
      exit 1
  fi

  set_rclone_env "$SILENT_OPTION" $GIT_REGISTRY

  echo::info "$FUNCTION_NAME: Mount Rclone $GIT_REGISTRY at $RCLONE_MOUNTED_PATH"

  RCLONE_COMMAND="rclone mount $RCLONE_REMOTE_NAME:$RCLONE_BASE_PATH $RCLONE_MOUNTED_PATH"
  if [ $RCLONE_PROCESS_MODE == "daemon" ]; then
    RCLONE_COMMAND="$RCLONE_COMMAND --daemon"
  fi;
  echo::info "$FUNCTION_NAME: Executing the command: $RCLONE_COMMAND"
  eval "$RCLONE_COMMAND"

  echo::info "$FUNCTION_NAME: Rclone $GIT_REGISTRY mounted at $RCLONE_MOUNTED_PATH"

}

function set_env(){

    local FUNCTION_NAME="set-env"

    local SILENT_OPTION=""

    # The prefix for our env
    local ENV_PREFIX="GITBKP"

    # The registry is an unique name
    # that identifies a Git Server instance
    GIT_REGISTRY=""

    # This for loop should have no echo
    # Why? We use this function to get the list of repo to handle
    # We therefore need the raw output without any echo
    for arg in "$@"; do
        case "$arg" in
        "")
          # empty arg
          ;;
        "--silent")
          SILENT_OPTION="--silent"
          ;;
        *)
          # Command or arg
          if [ "$GIT_REGISTRY" == "" ]; then
              GIT_REGISTRY="${arg^^}" # ^^ for uppercase
            else
              echo::err "$FUNCTION_NAME: Too much argument found: $FUNCTION_NAME except only one argument, the instance. ($arg) is the second argument"
              exit 1;
          fi
          shift
          ;;
        esac
    done

    if [ "$GIT_REGISTRY" == "" ]; then
      echo::err "The Git Registry should be not empty"
      exit 1;
    fi

    echo::info "$SILENT_OPTION" "Setting env for Git Instance: $GIT_REGISTRY"



    # Target
    GIT_PLATFORM_ENV_NAME="${ENV_PREFIX}_${GIT_REGISTRY}_PLATFORM"
    if [ -z "${!GIT_PLATFORM_ENV_NAME+x}" ]; then
      # PLATFORM/Registry Type type not found
      # Well-Known registry
      case $GIT_REGISTRY in
        "GITHUB")
          GIT_PLATFORM="github"
          ;;
        *)
          echo::err "Environment variable '$GIT_PLATFORM_ENV_NAME' does not exist."
          exit 1
          ;;
      esac
    else
      GIT_PLATFORM=${!GIT_PLATFORM_ENV_NAME}
    fi
    echo::info "$SILENT_OPTION" "$FUNCTION_NAME:  * Platform: $GIT_PLATFORM"

    # Domain
    GIT_DOMAIN=""
    GIT_DOMAIN_ENV_NAME="${ENV_PREFIX}_${GIT_REGISTRY}_DOMAIN"
    if [ -z "${!GIT_DOMAIN_ENV_NAME+x}" ]; then
      case ${GIT_PLATFORM} in
        github)
          GIT_DOMAIN="github.com"
          ;;
        gogs)
          echo::err "Environment variable '$GIT_DOMAIN_ENV_NAME' is mandatory for gogs"
          exit 1
          ;;
        *)
          # Local registry does not have any domain
          ;;
        esac
    else
      GIT_DOMAIN=${!GIT_DOMAIN_ENV_NAME}
    fi
    echo::info "$SILENT_OPTION" "$FUNCTION_NAME:  * Domain: $GIT_DOMAIN"

    # API Access Token
    GIT_TOKEN_ENV_NAME="${ENV_PREFIX}_${GIT_REGISTRY}_TOKEN"
    if [ -z "${!GIT_TOKEN_ENV_NAME+x}" ]; then
        unset GIT_TOKEN;
        echo::warn "$SILENT_OPTION" "$FUNCTION_NAME:  * Api Token: Variable ($GIT_TOKEN_ENV_NAME) not found"
      else
        GIT_TOKEN=${!GIT_TOKEN_ENV_NAME}
        echo::info "$SILENT_OPTION" "$FUNCTION_NAME:  * Api Token: Found"
    fi;

}

# Set the configuration via env
# Conf via env variables
# https://rclone.org/docs/#environment-variables
function set_rclone_env(){

    local FUNCTION_NAME="set_rclone_env"

    # to avoid: NOTICE: Config file "/home/me/.rclone.conf" not found - using defaults
    touch "$HOME"/.rclone.conf

    # The registry is an unique name
    # that identifies a Git Server instance
    GIT_REGISTRY=""

    local SILENT_OPTION=""

    # This for loop should have no echo
    # Why? We use this function to get the list of repo to handle
    # We therefore need the raw output without any echo
    for arg in "$@"; do
        case "$arg" in
        "")
          # empty arg
          ;;
        "--silent")
          SILENT_OPTION="--silent"
          ;;
        *)
          # Command or arg
          if [ "$GIT_REGISTRY" == "" ]; then
              GIT_REGISTRY="${arg^^}" # ^^ for uppercase
            else
              echo::err "$FUNCTION_NAME: Too much argument found: $FUNCTION_NAME except only one argument, a git registry. ($arg) is the second argument"
              exit 1;
          fi
          shift
          ;;
        esac
    done

    if [ "$GIT_REGISTRY" == "" ]; then
      echo::err "$FUNCTION_NAME: The first argument should be not empty with the git instance name"
      exit 1;
    fi

    set_env "$SILENT_OPTION" "$GIT_REGISTRY"

    # Rclone specific
    RCLONE_REMOTE_NAME_ENV_NAME="${ENV_PREFIX}_${GIT_REGISTRY}_RCLONE_REMOTE_NAME"
    if [ -z "${!RCLONE_REMOTE_NAME_ENV_NAME+x}" ]; then
        RCLONE_REMOTE_NAME=${GIT_REGISTRY}
        echo::info "$SILENT_OPTION" "$FUNCTION_NAME:  * Env variable ($RCLONE_REMOTE_NAME_ENV_NAME) was not found. Setting Rclone remote name to the Git Registry: ${GIT_REGISTRY}"
      else
        RCLONE_REMOTE_NAME=${!RCLONE_REMOTE_NAME_ENV_NAME}
    fi;
    echo::info "$SILENT_OPTION" "$FUNCTION_NAME:  * Rclone remote Name: $RCLONE_REMOTE_NAME"

    RCLONE_BASE_PATH_ENV_NAME="${ENV_PREFIX}_${GIT_REGISTRY}_RCLONE_BASE_PATH"
    if [ -z "${!RCLONE_BASE_PATH_ENV_NAME+x}" ]; then
        echo::info "$SILENT_OPTION" "$FUNCTION_NAME:  * Env variable ($RCLONE_BASE_PATH_ENV_NAME) was not found. Setting to empty string"
        RCLONE_BASE_PATH=""
      else
        RCLONE_BASE_PATH=${!RCLONE_BASE_PATH_ENV_NAME}
        echo::info "$SILENT_OPTION" "$FUNCTION_NAME:  * Rclone base path: $RCLONE_BASE_PATH"
    fi;

}


######################################
# List repo for a git provider
#####################################
function list_repo(){

  local GIT_REGISTRY=""
  # Report are default value for JQ expression
  local REPORT=""
  # The default Jq args are platform dependent
  local JQ_EXPRESSION=""
  local JQ_RAW_OUTPUT_OPTION=""
  # By default, echo are added to the output
  local SILENT_OPTION=""

  # The maximum of repo to retrieved
  local FILTER_MAX_REPO_COUNT=""
  # This for loop should have no echo
  # Why? We use this function to get the list of repo to handle
  # We therefore need the raw output without any echo
  for arg in "$@"; do
    case "$arg" in
    "--silent")
      SILENT_OPTION="--silent"
      ;;
    --jq-expression=*)
      JQ_EXPRESSION=$(getOptionValue "$arg")
      ;;
    --filter-max-repo-count=*)
      FILTER_MAX_REPO_COUNT=$(getOptionValue "$arg")
      ;;
    "--jq-raw-output"|"--jq-raw")
      JQ_RAW_OUTPUT_OPTION="--raw-output"
      ;;
    --report=*)
      REPORT=$(getOptionValue "$arg")
      ;;
    "--help"|"-h")
      help_list
      exit
      ;;
    *)
      # Command or arg
      if [ "$GIT_REGISTRY" == "" ]; then
          GIT_REGISTRY=$arg
        else
          echo::err "$FUNCTION_NAME: Too much argument found: list except only one argument, the registry. ($arg) is the second argument"
          exit 1;
      fi
      ;;
    esac
  done

  if [ "$GIT_REGISTRY" = "" ]; then
    help_list
    echo::err "The git registry is mandatory"
    exit 1
  fi

  set_env "$GIT_REGISTRY" "$SILENT_OPTION"

  # Report
  # Report are default values
  if [ "${REPORT}" == "" ]; then
    REPORT="default"
    echo::info "$SILENT_OPTION" "No Report found, set to: $REPORT"
  else
    echo::info "$SILENT_OPTION" "Report: $REPORT"
  fi

  case ${GIT_PLATFORM} in
  gogs)

    # Auth Token
    if [ -z "${GIT_TOKEN+x}" ]; then
      echo::err "Git Token is mandatory to list repo for $GIT_PLATFORM"
      exit 1
    fi

    case ${REPORT} in
      "ls")
        JQ_EXPRESSION_REPORT="map(.full_name) | join(\"$IFS\")"
        JQ_RAW_OUTPUT_OPTION="--raw-output"
        ;;
      "asis")
        JQ_EXPRESSION_REPORT='.'
        JQ_RAW_OUTPUT_REPORT_OPTION=""
        ;;
      "default")
        JQ_EXPRESSION_REPORT='[.[] | .full_name]'
        JQ_RAW_OUTPUT_REPORT_OPTION=""
        ;;
      "csv")
        JQ_EXPRESSION_REPORT='["full_name", "fork"], (.[] | [.full_name, .fork]) | @csv'
        JQ_RAW_OUTPUT_OPTION="--raw-output"
        ;;
      *)
        echo::err "$FUNCTION_NAME: The report ($REPORT) is unknown"
        exit 1;
      ;;
    esac

    # Jq arguments
    if [ "${JQ_EXPRESSION}" == "" ]; then
        JQ_EXPRESSION=${JQ_EXPRESSION_REPORT}
    fi
    echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Jq Expression: $JQ_EXPRESSION"
    if [ "${JQ_RAW_OUTPUT_OPTION}" == "" ]; then
        JQ_RAW_OUTPUT_OPTION=${JQ_RAW_OUTPUT_REPORT_OPTION}
    fi
    echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Jq Raw Output Option: $JQ_RAW_OUTPUT_OPTION"

    # URL AI
    URL_API="https://$GIT_DOMAIN/api/v1/user/repos"
    echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Requesting $URL_API"

    # Execute
    echo "$SILENT_OPTION" ""
    # $JQ_RAW_OUTPUT_OPTION should not be quoted because jq does not accept empty string argument
    # shellcheck disable=SC2086
    curl -sS -H "Authorization: token $GIT_TOKEN" "$URL_API" | jq $JQ_RAW_OUTPUT_OPTION "${JQ_EXPRESSION}"
    echo "$SILENT_OPTION" ""
    ;;
  github)

      # Auth Token
      if [ -z "${GIT_TOKEN+x}" ]; then
        echo::err "Git Token is mandatory to list repo for $GIT_PLATFORM"
        exit 1
      fi

      case ${REPORT} in
        "ls")
          JQ_EXPRESSION_REPORT="map(.full_name) | join(\"$IFS\")"
          JQ_RAW_OUTPUT_OPTION="--raw-output"
          ;;
        "asis")
          JQ_EXPRESSION_REPORT='.'
          JQ_RAW_OUTPUT_REPORT_OPTION=""
          ;;
        "default")
          JQ_EXPRESSION_REPORT='[.[] | .full_name]'
          JQ_RAW_OUTPUT_REPORT_OPTION=""
          ;;
        "csv")
          JQ_EXPRESSION_REPORT='["full_name", "fork", "clone_url"], (.[] | [.full_name, .fork, .clone_url]) | @csv'
          JQ_RAW_OUTPUT_OPTION="--raw-output"
          ;;
        *)
          echo::err "$FUNCTION_NAME: The report ($REPORT) is unknown"
          exit 1;
        ;;
      esac

      # Jq arguments
      if [ "${JQ_EXPRESSION}" == "" ]; then
          JQ_EXPRESSION=${JQ_EXPRESSION_REPORT}
      fi
      echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Jq Expression: $JQ_EXPRESSION"
      if [ "${JQ_RAW_OUTPUT_OPTION}" == "" ]; then
          JQ_RAW_OUTPUT_OPTION=${JQ_RAW_OUTPUT_REPORT_OPTION}
      fi
      echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Jq Raw Output Option: $JQ_RAW_OUTPUT_OPTION"

      # URL API: repo for the authenticated user
      # Doc: https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-repositories-for-the-authenticated-user
      URL_API="https://api.github.com/user/repos"
      REPO_BY_PAGE=100
      if [ "$FILTER_MAX_REPO_COUNT" != "" ] && [ "$FILTER_MAX_REPO_COUNT" -lt "$REPO_BY_PAGE" ]; then
        REPO_BY_PAGE=$FILTER_MAX_REPO_COUNT
      fi
      ACTUAL_PAGE=1
      TOTAL_COUNT=0
      TOTAL_REPOS='[]'
      while true; do

          REQUEST_URL="$URL_API?per_page=$REPO_BY_PAGE&page=$ACTUAL_PAGE"
          echo::info "$SILENT_OPTION" "$FUNCTION_NAME: $ACTUAL_PAGE - Requesting $REPO_BY_PAGE repo ($REQUEST_URL)";

          ACTUAL_REPOS=$(curl -sS -H "Authorization: token $GIT_TOKEN" "$REQUEST_URL")
          TOTAL_REPOS=$(jq -s '.[0] + .[1]' <(echo "$TOTAL_REPOS") <(echo "$ACTUAL_REPOS"))

          # Count the number of objects
          COUNT=$(echo "$ACTUAL_REPOS" | jq ". | length")
          # Add the COUNT to the total COUNT
          TOTAL_COUNT=$((TOTAL_COUNT + COUNT))

          # Break on last page
          if [ "$COUNT" -lt "$REPO_BY_PAGE" ]; then
              echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Retrieved $TOTAL_COUNT repositories";
              break
          fi

          # Break on max count
          if [ "$FILTER_MAX_REPO_COUNT" != "" ] && [ "$TOTAL_COUNT" -ge "$FILTER_MAX_REPO_COUNT" ]; then
              echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Max total count repositories ($TOTAL_COUNT) reached";
              break
          fi

          ACTUAL_PAGE=$((ACTUAL_PAGE + 1))

      done

      echo::info "$SILENT_OPTION" "$FUNCTION_NAME: "
      # $JQ_RAW_OUTPUT_OPTION should not be quoted because jq does not accept empty string argument
      # shellcheck disable=SC2086
      echo "$TOTAL_REPOS" | jq $JQ_RAW_OUTPUT_OPTION "${JQ_EXPRESSION}"

      ;;
  *)
    echo::err "The git platform $GIT_PLATFORM is not yet implemented"
    exit 1
    ;;
  esac

}

function backup() {

  local FUNCTION_NAME="backup"
  local GIT_SOURCE=""
  local GIT_TARGET=""
  local RESTART=""
  local FILTER_MAX_REPO_COUNT=""
  local FILTER_EXCLUDE_PATTERN=""
  for arg in "$@"; do
      case "$arg" in
        "--help"|"-h")
          help_backup
          exit;
         ;;
       "--restart")
          RESTART="true"
          ;;
        --filter-max-repo-count=*)
          FILTER_MAX_REPO_COUNT=$(getOptionValue "$arg")
          ;;
        --filter-exclude-pattern=*)
          FILTER_EXCLUDE_PATTERN=$(getOptionValue "$arg")
          ;;
        "")
        ;;
        *)
          if [ "$GIT_SOURCE" == "" ]; then
              GIT_SOURCE="${arg^^}" # ^^ for uppercase
          elif [ "$GIT_TARGET" == "" ]; then
              GIT_TARGET="${arg^^}" # ^^ for uppercase
          else
              echo::err "$FUNCTION_NAME: Too much argument found: $FUNCTION_NAME except only 2 arguments, the source and the target. ($arg) is the third argument"
              exit 1;
          fi
          shift
          ;;
      esac
  done

  ## Arg feedback
  echo::info "$FUNCTION_NAME: Arguments feedback"
  if [ "$FILTER_EXCLUDE_PATTERN" != "" ]; then
    echo::info "$FUNCTION_NAME:   * Exclude pattern: $FILTER_EXCLUDE_PATTERN"
  else
    echo::info "$FUNCTION_NAME:   * No Exclude pattern"
  fi
  if [ "$FILTER_MAX_REPO_COUNT" != "" ]; then
    echo::info "$FUNCTION_NAME:   * Max repo count: $FILTER_MAX_REPO_COUNT"
  else
    echo::info "$FUNCTION_NAME:   * No Max repo count"
  fi
  # Source
  if [ "$GIT_SOURCE" == "" ]; then
    echo::err "$FUNCTION_NAME: A git source is excepted as first argument"
    exit 1;
  else
    echo::info "$FUNCTION_NAME:   * Git source: $GIT_SOURCE"
  fi
  # Target
  if [ "$GIT_TARGET" == "" ]; then
    echo::err "$FUNCTION_NAME: A git target is excepted as second argument"
    exit 1;
  else
    echo::info "$FUNCTION_NAME:   * Git target: $GIT_TARGET"
  fi

  set_env "$GIT_SOURCE"
  GIT_PLATFORM_SOURCE=$GIT_PLATFORM

  set_env "$GIT_TARGET"
  GIT_PLATFORM_TARGET=$GIT_PLATFORM
  if [ "$GIT_PLATFORM_TARGET" != "rclone" ]; then
    echo::err "$FUNCTION_NAME: Only a rclone git registry is supported as target"
    exit 1
  fi
  set_rclone_env "$GIT_TARGET"

  # Get the Json as CSV and loop over it
  echo::info "$FUNCTION_NAME: Looping over the repo of the registry $GIT_SOURCE"

  if [ $GIT_PLATFORM_SOURCE != "github" ]; then
    echo::err "$FUNCTION_NAME: Only GitHub as registry source is supported, not $GIT_PLATFORM_SOURCE"
    exit 1;
  fi

  # Backup Start
  # Get the last backup date
  LAST_BACKUP_TIME_FILE_PATH="$RCLONE_REMOTE_NAME:$RCLONE_BASE_PATH/last-backup-time.dat"
  if ! LAST_BACKUP_TIME=$(rclone cat "$LAST_BACKUP_TIME_FILE_PATH" 2>/dev/null); then
    # File does not exist
    # Rclone Sftp returns an error while s3 does not
    LAST_BACKUP_TIME=""
  fi
  LAST_BACKUP_TIME_EPOCH=""
  if [ "$LAST_BACKUP_TIME" == "" ]; then
    echo::info "$FUNCTION_NAME: No last backup time"
  else
    echo::info "$FUNCTION_NAME: Last backup time: $LAST_BACKUP_TIME"
    LAST_BACKUP_TIME_EPOCH=$(TZ=UTC date -d "$LAST_BACKUP_TIME" +%s)
  fi

  # Store the current date and time
  RCLONE_START_BACKUP_TIME_FILE_PATH="$RCLONE_REMOTE_NAME:$RCLONE_BASE_PATH/start-backup-time.dat"
  echo::info "$FUNCTION_NAME: Listing start backup time"
  if ! START_BACKUP_TIME_FILE_COUNT=$(rclone lsf "$RCLONE_START_BACKUP_TIME_FILE_PATH" 2>/dev/null | wc -l); then
    # File does not exist
    # Rclone Sftp returns an error while s3 does not
    START_BACKUP_TIME_FILE_COUNT="0"
  fi
  if [ "$START_BACKUP_TIME_FILE_COUNT" != "0" ]; then
    if [ "$RESTART" == "" ]; then
      echo::err "$FUNCTION_NAME: Start backup time found, a backup may be running or was killed, add the --restart option to pass this check"
      exit 1
    else
      echo::info "$FUNCTION_NAME: Restart used, using the stored start backup time. "
      START_BACKUP_TIME=$(rclone cat "$RCLONE_START_BACKUP_TIME_FILE_PATH")
      echo::info "$FUNCTION_NAME: Retrieved Start backup time: $START_BACKUP_TIME"
    fi
  else
    START_BACKUP_TIME=$(TZ=UTC date +"%Y-%m-%dT%H:%M:%SZ")
    echo::info "$FUNCTION_NAME: Start backup time: $START_BACKUP_TIME"
    echo::info "$FUNCTION_NAME: Writing Start backup time to $RCLONE_START_BACKUP_TIME_FILE_PATH"
    echo "$START_BACKUP_TIME" | rclone rcat "$RCLONE_START_BACKUP_TIME_FILE_PATH"
  fi;



  # Github Api Call
  # Note: pushed_at represents the date and time of the last commit
  echo::info "$FUNCTION_NAME: Retrieving repos"
  FILTER_MAX_REPO_COUNT_OPTION=""
  if [ "$FILTER_MAX_REPO_COUNT" != "" ]; then
    FILTER_MAX_REPO_COUNT_OPTION="--filter-max-repo-count=$FILTER_MAX_REPO_COUNT"
  fi
  REPOS_COMMAND="$CLI_NAME list_repo $GIT_SOURCE $FILTER_MAX_REPO_COUNT_OPTION --jq-expression='(.[] | [.full_name, .fork, .ssh_url, .pushed_at]) | @csv' '--jq-raw-output' '--silent'"
  echo::info "$FUNCTION_NAME: executing command: $REPOS_COMMAND"
  API_REPOS=$(eval "$REPOS_COMMAND")

  local ACTUAL_COUNT=0
  while IFS=',' read -r REPO_FULL_NAME REPO_FORK REPO_SSH_URL PUSHED_AT; do

    # Analytics
    ACTUAL_COUNT=$((ACTUAL_COUNT + 1))

    REPO_FULL_NAME=$(echo "$REPO_FULL_NAME" | tr -d '"')
    IFS='/' read -r REPO_PARENT REPO_NAME <<< "$REPO_FULL_NAME"
    echo::info " "
    echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Backup Repo: $REPO_FULL_NAME"

    if [ "$REPO_FORK" == true ]; then
      echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Skipped forked repo: $REPO_FULL_NAME";
      continue
    fi

    if [ "$FILTER_EXCLUDE_PATTERN" != "" ] && [[ "$REPO_FULL_NAME" =~ $FILTER_EXCLUDE_PATTERN ]]; then
      echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Skipped pattern exclude repo: $REPO_FULL_NAME";
      continue
    fi

    BUNDLE_NAME="${REPO_NAME}.bundle"
    BUNDLE_RELATIVE_PATH=$REPO_PARENT/$BUNDLE_NAME
    BUNDLE_TARGET_PATH="$RCLONE_REMOTE_NAME:$RCLONE_BASE_PATH/$BUNDLE_RELATIVE_PATH"
    if ! TARGET_BUNDLE_PATH_COUNT=$(rclone lsf "$BUNDLE_TARGET_PATH" 2>/dev/null | wc -l); then
      # File does not exist
      # Rclone Sftp returns an error while s3 does not
      TARGET_BUNDLE_PATH_COUNT="0"
    fi
    if [ "$TARGET_BUNDLE_PATH_COUNT" != "0" ]; then
      echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Backup bundle already exist at $BUNDLE_TARGET_PATH";
      # 2024-08-29T13:20:27Z
      PUSHED_AT_TRIMMED=$(echo "$PUSHED_AT" | tr -d '"')
      PUSHED_AT_EPOCH=$(TZ=UTC date -d"$PUSHED_AT_TRIMMED" +%s)
      if [ "$LAST_BACKUP_TIME" != "" ] && [ "$PUSHED_AT_EPOCH" -lt "$LAST_BACKUP_TIME_EPOCH" ]; then
        echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Skipped backup repo: No push since last backup. Last Pushed Date ($PUSHED_AT) is less than the last backup time ($LAST_BACKUP_TIME)";
        continue
      fi
    fi

    echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Cloning Repo: $REPO_FULL_NAME"
    CLONE_TARGET_DIR=/tmp/clone/$REPO_FULL_NAME
    if [ ! -d "$CLONE_TARGET_DIR" ]; then
      mkdir -p "$CLONE_TARGET_DIR"
      CLONE_COMMAND="git clone --mirror $REPO_SSH_URL $CLONE_TARGET_DIR --quiet"
      echo::info "$FUNCTION_NAME: Executing : $CLONE_COMMAND"
      eval "$CLONE_COMMAND"
    else
      echo::info "$FUNCTION_NAME: Clone already done"
    fi

    # Empty repo?
    OBJECT_COUNT=$(find "$CLONE_TARGET_DIR"/objects -type f | wc -l)
    if [ "$OBJECT_COUNT" == 0 ]; then
      echo::info "$FUNCTION_NAME: Skipping backup - repo empty: $REPO_FULL_NAME"
      continue
    fi


    BUNDLE_SOURCE_PATH="/tmp/$BUNDLE_RELATIVE_PATH"
    BUNDLE_SOURCE_PARENT_PATH="/tmp/$REPO_PARENT"
    mkdir -p "$BUNDLE_SOURCE_PARENT_PATH"
    echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Creating bundle: $BUNDLE_SOURCE_PATH"
    BUNDLE_COMMAND="git -C $CLONE_TARGET_DIR -c 'pack.threads=1' bundle create $BUNDLE_SOURCE_PATH --all --quiet"
    echo::info "$FUNCTION_NAME: Executing : $BUNDLE_COMMAND"
    eval "$BUNDLE_COMMAND"

    echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Uploading bundle: $BUNDLE_NAME"
    MOVE_COMMAND="rclone moveto $BUNDLE_SOURCE_PATH $BUNDLE_TARGET_PATH --progress"
    echo::info "$FUNCTION_NAME: Executing : $MOVE_COMMAND"
    eval "$MOVE_COMMAND"

    echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Cleaning up"
    echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Deleting Git repo: $CLONE_TARGET_DIR"
    rm -rf "$CLONE_TARGET_DIR"
    echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Deleting Git repo: Done"


  done <<< "$API_REPOS" # needed to not run as pipeline and get ACTUAL_COUNT


  echo "$START_BACKUP_TIME" | rclone rcat "$LAST_BACKUP_TIME_FILE_PATH"
  rclone delete "$RCLONE_START_BACKUP_TIME_FILE_PATH"
  echo::info " "
  echo::info "$SILENT_OPTION" "$FUNCTION_NAME: Processed $ACTUAL_COUNT repositories";

}


COMMAND=""

# Parsing only the command
# Options are command related and are parsed
# in each function
SILENT_OPTION=""
for arg in "$@"; do
  case "$arg" in
  --silent|s)
    SILENT_OPTION="--silent"
    ;;
  --*|-*)
    ARGUMENTS+=("$arg")
    ;;
  *)
    # Command or arg
    if [ "$COMMAND" == "" ]; then
        COMMAND=$1
      else
        ARGUMENTS+=("$arg")
    fi
    ;;
  esac
done

if [ -z "$COMMAND" ]; then
  echo::info "$SILENT_OPTION" 'No command was given, help chosen.'
  COMMAND='help'
fi

 echo::echo "$SILENT_OPTION" ""
 echo::echo "$SILENT_OPTION" "${CLI_NAME^} ${COMMAND^}"
 echo::echo "$SILENT_OPTION" "-------------------------------------------"
 echo::echo "$SILENT_OPTION" ""
case ${COMMAND} in
  "help")
    help
    ;;
  "synopsis")
    synopsis
    ;;
  "list")
    list_repo "$SILENT_OPTION" "${ARGUMENTS[@]}"
    ;;
  "backup")
    backup "$SILENT_OPTION" "${ARGUMENTS[@]}"
    ;;
  "mount")
    mount "$SILENT_OPTION" "${ARGUMENTS[@]}"
    ;;
  *)
    help
    echo::err "The command $COMMAND is unknown"
    exit 1
    ;;
esac
