#!/bin/bash


set -Eeuo pipefail
# shellcheck source=../..//bash-lib/lib/bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_trap
# shellcheck source=../..//bash-lib/lib/bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"
# shellcheck source=../..//bash-lib/lib/bashlib-git.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-git.sh"

function synopsis(){

  cat <<EOF
\`\`\`bash
$(basename "$0")
\`\`\`
EOF

}

# Doc Synopsis
if [ "${1:-}" = "synopsis" ]; then
  synopsis
  exit 0
fi

# Help
if [[ "${1:-}" =~ -h|--help|help ]]; then
  doc::help synopsis
  exit 0
fi

function git-commit-status() {

  # Upstream
  git fetch
  upstreamCommitToMerge=$(git rev-list HEAD...'@{u}' --count)
  localCommitToPush=$(git::get_commits_not_pushed)
  echo "  * $upstreamCommitToMerge commits to merge"
  echo "  * $localCommitToPush commits to push"

  # for scripting: git status --porcelain
  # porcelain means give the output in an easy-to-parse format for scripts
  local vPorcelain
  vPorcelain=$(git status --porcelain)
  if [[ -z $vPorcelain ]]; then
    echo "No modifications"
  else
    # output:
    # for an unstaged file: `status space path`
    # for a staged file: `status space space path`
    echo "$vPorcelain" | while read -r fileStatusLine; do
      # fileStatus=${fileStatusLine:0:1} # not yet used
      fileStatusStaged=${fileStatusLine:1:2}
      if [ "${fileStatusStaged}" == '  ' ]; then
        inNextCommit=' (staged)'
        # filePath=${fileStatusLine:3} # not yet used
      else
        inNextCommit=' (unstaged)'
        # filePath=${fileStatusLine:2} # not yet used
      fi
      echo "$fileStatusLine$inNextCommit"
    done
  fi

}

git-commit-status