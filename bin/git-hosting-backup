#!/bin/bash



set -Eeuo pipefail
# shellcheck source=../..//bash-lib/lib/bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_trap
# shellcheck source=../..//bash-lib/lib/bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"
# shellcheck source=../..//bash-lib/lib/bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"


# Set the configuration via env
# Conf via env variables
# https://rclone.org/docs/#environment-variables
function set_rclone_env(){


    # to avoid: NOTICE: Config file "/home/me/.rclone.conf" not found - using defaults
    touch "$HOME"/.rclone.conf


    if [ "${1:-}" == "" ]; then
      echo::err "The first argument should be not empty with the git instance name"
      exit 1;
    fi

    GIT_HOSTING="${1^^}" # ^^ for uppercase

    eval "$(git-hosting-env "$GIT_HOSTING")"

    # Rclone specific
    RCLONE_REMOTE_NAME_ENV_NAME="${ENV_PREFIX}_${GIT_HOSTING}_RCLONE_REMOTE_NAME"
    if [ -z "${!RCLONE_REMOTE_NAME_ENV_NAME+x}" ]; then
        RCLONE_REMOTE_NAME=${GIT_HOSTING}
        echo::info  " * Env variable ($RCLONE_REMOTE_NAME_ENV_NAME) was not found. Setting Rclone remote name to the Git Registry: ${GIT_HOSTING}"
      else
        RCLONE_REMOTE_NAME=${!RCLONE_REMOTE_NAME_ENV_NAME}
    fi;
    echo::info  " * Rclone remote Name: $RCLONE_REMOTE_NAME"

    RCLONE_BASE_PATH_ENV_NAME="${ENV_PREFIX}_${GIT_HOSTING}_RCLONE_BASE_PATH"
    if [ -z "${!RCLONE_BASE_PATH_ENV_NAME+x}" ]; then
        echo::info  " * Env variable ($RCLONE_BASE_PATH_ENV_NAME) was not found. Setting to empty string"
        RCLONE_BASE_PATH=""
      else
        RCLONE_BASE_PATH=${!RCLONE_BASE_PATH_ENV_NAME}
        echo::info  " * Rclone base path: $RCLONE_BASE_PATH"
    fi;

}

METRIC_TOTAL_COUNT_NAME="total_count"
METRIC_BUNDLE_COUNT_NAME="bundle_count"
METRIC_SKIPPED_NO_CHANGE_COUNT_NAME="skipped_no_change_count"
METRIC_SKIPPED_PATTERN_COUNT_NAME="skipped_pattern_count"
METRIC_SKIPPED_EMPTY_COUNT_NAME="skipped_empty_count"
METRIC_SKIPPED_FORK_COUNT_NAME="skipped_fork_count"

function synopsis() {

    cat <<EOF
\`\`\`bash
$(basename "$0") source target [...]
\`\`\`

where:

* source                       - a git hosting service name to read from
* target                       - a target name to backup to
* --output                     - the statistics output format (json or prometheus). Default to json
* --restart                    - if a backup fail, it can be restarted with the restart flag
* --filter-exclude-pattern=xxx - a regexp pattern to exclude from applied on the repository full name (ie parent/name)
* --filter-max-repo-count='x'  - the maximum number of repositories to process

This script returns the following statistiques:

* \`$METRIC_TOTAL_COUNT_NAME\` is the number of repositories processed (up to max-repo-count option)
* \`$METRIC_BUNDLE_COUNT_NAME\` is the number of repositories bundled (ie dumped)
* \`$METRIC_SKIPPED_NO_CHANGE_COUNT_NAME\` is the number of repositories skipped because of no changes since the last dump
* \`$METRIC_SKIPPED_PATTERN_COUNT_NAME\` is the number of repositories skipped due to pattern matching
* \`$METRIC_SKIPPED_EMPTY_COUNT_NAME\` is the number of repositories skipped due to being empty
* \`$METRIC_SKIPPED_FORK_COUNT_NAME\` is the number of repositories skipped due to being a fork


Note:
\`\`\`bash
$METRIC_TOTAL_COUNT_NAME = $METRIC_BUNDLE_COUNT_NAME + $METRIC_SKIPPED_NO_CHANGE_COUNT_NAME + $METRIC_SKIPPED_PATTERN_COUNT_NAME + $METRIC_SKIPPED_EMPTY_COUNT_NAME + $METRIC_SKIPPED_FORK_COUNT_NAME
\`\`\`

Tip: You can process the json format further with \`jq\`
\`\`\`bash
$(basename "$0") source target | jq -r '.total_count .bundle_count'
\`\`\`
EOF

}

if [ "${1:-}" == "synopsis" ]; then
  synopsis
  exit
fi

if [[ "${1:-}" =~ -h|--help|help ]]; then
  doc::help synopsis
  exit
fi

args=$(getopt -l "restart,filter-max-repo-count:,filter-exclude-pattern:,jq-raw-output,jq-raw,help,report:,output:" -o "ro:" -- "$@")
eval set -- "$args"

GIT_SOURCE=""
GIT_TARGET=""
RESTART=""
FILTER_MAX_REPO_COUNT=""
FILTER_EXCLUDE_PATTERN=""
OUTPUT_FORMAT_JSON="json"
OUTPUT_FORMAT_PROM="prometheus"
OUTPUT_FORMAT=$OUTPUT_FORMAT_JSON
while [[ $# -gt 0 ]]
do
   case "$1" in
     "--restart"|"-r")
        RESTART="true"
        shift
        ;;
      "--output"|"-o")
        shift
        OUTPUT_FORMAT="$1"
        if [[ ! $OUTPUT_FORMAT =~ "$OUTPUT_FORMAT_JSON"|"$OUTPUT_FORMAT_PROM" ]]; then
          doc::help synopsis
          echo::err "The output format option should be $OUTPUT_FORMAT_JSON or $OUTPUT_FORMAT_PROM"
          exit 1
        fi
        shift
      ;;
      "--filter-max-repo-count")
        shift
        FILTER_MAX_REPO_COUNT="$1"
        shift
        ;;
      "--filter-exclude-pattern")
        shift
        FILTER_EXCLUDE_PATTERN="$1"
        shift
        ;;
      "--")
        # The args separator of getopt
        shift
        ;;
      *)
        if [ "$GIT_SOURCE" == "" ]; then
            GIT_SOURCE="${1,,}" # ,, for lowercase
        elif [ "$GIT_TARGET" == "" ]; then
            GIT_TARGET="${1,,}" # ,, for lowercase
        else
            doc::help synopsis
            echo::err "Too much argument found: We except only 2 arguments, the source and the target. ($1) is the third argument"
            exit 1;
        fi
        shift
        ;;
    esac
done

## Arg feedback
echo::info "Arguments feedback"
if [ "$FILTER_EXCLUDE_PATTERN" != "" ]; then
  echo::info "  * Exclude pattern: $FILTER_EXCLUDE_PATTERN"
else
  echo::info "  * No Exclude pattern"
fi
if [ "$FILTER_MAX_REPO_COUNT" != "" ]; then
  echo::info "  * Max repo count: $FILTER_MAX_REPO_COUNT"
else
  echo::info "  * No Max repo count"
fi
# Source
if [ "$GIT_SOURCE" == "" ]; then
  echo::err "A git source is excepted as first argument"
  exit 1;
else
  echo::info "  * Git source: $GIT_SOURCE"
fi
# Target
if [ "$GIT_TARGET" == "" ]; then
  echo::err "A git target is excepted as second argument"
  exit 1;
else
  echo::info "  * Git target: $GIT_TARGET"
fi

eval "$(git-hosting-env "$GIT_SOURCE")"
GIT_PLATFORM_SOURCE=$GIT_PLATFORM

eval "$(git-hosting-env "$GIT_TARGET")"
GIT_PLATFORM_TARGET=$GIT_PLATFORM
if [ "$GIT_PLATFORM_TARGET" != "rclone" ]; then
  echo::err "Only a rclone git registry is supported as target"
  exit 1
fi
set_rclone_env "$GIT_TARGET"

# Get the Json as CSV and loop over it
echo::info "Looping over the repo of the registry $GIT_SOURCE"

if [ "$GIT_PLATFORM_SOURCE" != "github" ]; then
  echo::err "Only GitHub as registry source is supported for now, not $GIT_PLATFORM_SOURCE"
  exit 1;
fi

# Backup Start
# Get the last backup date
LAST_BACKUP_TIME_FILE_PATH="$RCLONE_REMOTE_NAME:$RCLONE_BASE_PATH/last-backup-time.dat"
if ! LAST_BACKUP_TIME=$(rclone cat "$LAST_BACKUP_TIME_FILE_PATH" 2>/dev/null); then
  # File does not exist
  # Rclone Sftp returns an error while s3 does not
  LAST_BACKUP_TIME=""
fi
LAST_BACKUP_TIME_EPOCH=""
if [ "$LAST_BACKUP_TIME" == "" ]; then
  echo::info "No last backup time"
else
  echo::info "Last backup time: $LAST_BACKUP_TIME"
  LAST_BACKUP_TIME_EPOCH=$(TZ=UTC date -d "$LAST_BACKUP_TIME" +%s)
fi

# Store the current date and time
RCLONE_START_BACKUP_TIME_FILE_PATH="$RCLONE_REMOTE_NAME:$RCLONE_BASE_PATH/start-backup-time.dat"
echo::info "Listing start backup time"
if ! START_BACKUP_TIME_FILE_COUNT=$(rclone lsf "$RCLONE_START_BACKUP_TIME_FILE_PATH" 2>/dev/null | wc -l); then
  # File does not exist
  # Rclone Sftp returns an error while s3 does not
  START_BACKUP_TIME_FILE_COUNT="0"
fi
if [ "$START_BACKUP_TIME_FILE_COUNT" != "0" ]; then
  if [ "$RESTART" == "" ]; then
    echo::err "Start backup time found, a backup may be running or was killed, add the --restart option to pass this check"
    exit 1
  else
    echo::info "Restart used, using the stored start backup time. "
    START_BACKUP_TIME=$(rclone cat "$RCLONE_START_BACKUP_TIME_FILE_PATH")
    echo::info "Retrieved Start backup time: $START_BACKUP_TIME"
  fi
else
  START_BACKUP_TIME=$(TZ=UTC date +"%Y-%m-%dT%H:%M:%SZ")
  echo::info "Start backup time: $START_BACKUP_TIME"
  echo::info "Writing Start backup time to $RCLONE_START_BACKUP_TIME_FILE_PATH"
  echo "$START_BACKUP_TIME" | rclone rcat "$RCLONE_START_BACKUP_TIME_FILE_PATH"
fi;



# Github Api Call
# Note: pushed_at represents the date and time of the last commit
echo::info "Retrieving repos"
FILTER_MAX_REPO_COUNT_OPTION=""
if [ "$FILTER_MAX_REPO_COUNT" != "" ]; then
  FILTER_MAX_REPO_COUNT_OPTION="--filter-max-repo-count=$FILTER_MAX_REPO_COUNT"
fi
REPOS_COMMAND="git-hosting-list $GIT_SOURCE $FILTER_MAX_REPO_COUNT_OPTION --jq-expression='(.[] | [.full_name, .fork, .ssh_url, .pushed_at]) | @csv' --jq-raw-output"
echo::info "executing command: $REPOS_COMMAND"
API_REPOS=$(eval "$REPOS_COMMAND")

TOTAL_COUNT=0
SKIPPED_FORK=0
SKIPPED_NO_CHANGE=0
SKIPPED_EMPTY=0
SKIPPED_PATTERN=0
BUNDLE_COUNT=0
while IFS=',' read -r REPO_FULL_NAME REPO_FORK REPO_SSH_URL PUSHED_AT; do

  # Analytics
  TOTAL_COUNT=$((TOTAL_COUNT + 1))

  REPO_FULL_NAME=$(echo "$REPO_FULL_NAME" | tr -d '"')
  IFS='/' read -r REPO_PARENT REPO_NAME <<< "$REPO_FULL_NAME"
  echo::info " "
  echo::info "Backup Repo: $REPO_FULL_NAME"

  if [ "$REPO_FORK" == true ]; then
    echo::info "Skipped forked repo: $REPO_FULL_NAME";
    SKIPPED_FORK=$((SKIPPED_FORK + 1))
    continue
  fi

  if [ "$FILTER_EXCLUDE_PATTERN" != "" ] && [[ "$REPO_FULL_NAME" =~ $FILTER_EXCLUDE_PATTERN ]]; then
    echo::info "Excluded due to pattern matching: $REPO_FULL_NAME";
    SKIPPED_PATTERN=$((SKIPPED_PATTERN + 1))
    continue
  fi

  BUNDLE_NAME="${REPO_NAME}.bundle"
  BUNDLE_RELATIVE_PATH=$REPO_PARENT/$BUNDLE_NAME
  BUNDLE_TARGET_PATH="$RCLONE_REMOTE_NAME:$RCLONE_BASE_PATH/$BUNDLE_RELATIVE_PATH"
  if ! TARGET_BUNDLE_PATH_COUNT=$(rclone lsf "$BUNDLE_TARGET_PATH" 2>/dev/null | wc -l); then
    # File does not exist
    # Rclone Sftp returns an error while s3 does not
    TARGET_BUNDLE_PATH_COUNT="0"
  fi
  if [ "$TARGET_BUNDLE_PATH_COUNT" != "0" ]; then
    echo::info "Backup bundle already exist at $BUNDLE_TARGET_PATH";
    # 2024-08-29T13:20:27Z
    PUSHED_AT_TRIMMED=$(echo "$PUSHED_AT" | tr -d '"')
    PUSHED_AT_EPOCH=$(TZ=UTC date -d"$PUSHED_AT_TRIMMED" +%s)
    if [ "$LAST_BACKUP_TIME" != "" ] && [ "$PUSHED_AT_EPOCH" -lt "$LAST_BACKUP_TIME_EPOCH" ]; then
      echo::info "Skipped backup repo: No push since last backup. Last Pushed Date ($PUSHED_AT) is less than the last backup time ($LAST_BACKUP_TIME)";
      SKIPPED_NO_CHANGE=$((SKIPPED_NO_CHANGE + 1))
      continue
    fi
  fi

  echo::info "Cloning Repo: $REPO_FULL_NAME"
  CLONE_TARGET_DIR=/tmp/clone/$REPO_FULL_NAME
  if [ ! -d "$CLONE_TARGET_DIR" ]; then
    mkdir -p "$CLONE_TARGET_DIR"
    CLONE_COMMAND="git clone --mirror $REPO_SSH_URL $CLONE_TARGET_DIR --quiet"
    echo::info "Executing : $CLONE_COMMAND"
    eval "$CLONE_COMMAND"
  else
    echo::info "Clone already done"
  fi

  # Empty repo?
  OBJECT_COUNT=$(find "$CLONE_TARGET_DIR"/objects -type f | wc -l)
  if [ "$OBJECT_COUNT" == 0 ]; then
    echo::info "Skipping backup - repo empty: $REPO_FULL_NAME"
    SKIPPED_EMPTY=$((SKIPPED_EMPTY + 1))
    continue
  fi


  BUNDLE_SOURCE_PATH="/tmp/$BUNDLE_RELATIVE_PATH"
  BUNDLE_SOURCE_PARENT_PATH="/tmp/$REPO_PARENT"
  mkdir -p "$BUNDLE_SOURCE_PARENT_PATH"
  echo::info "Creating bundle: $BUNDLE_SOURCE_PATH"
  BUNDLE_COMMAND="git -C $CLONE_TARGET_DIR -c 'pack.threads=1' bundle create $BUNDLE_SOURCE_PATH --all --quiet"
  echo::info "Executing : $BUNDLE_COMMAND"
  BUNDLE_COUNT=$((BUNDLE_COUNT + 1))
  eval "$BUNDLE_COMMAND"

  echo::info "Uploading bundle: $BUNDLE_NAME"
  MOVE_COMMAND="rclone moveto $BUNDLE_SOURCE_PATH $BUNDLE_TARGET_PATH --progress"
  echo::info "Executing : $MOVE_COMMAND"
  eval "$MOVE_COMMAND"

  echo::info "Cleaning up"
  echo::info "Deleting Git repo: $CLONE_TARGET_DIR"
  rm -rf "$CLONE_TARGET_DIR"
  echo::info "Deleting Git repo: Done"


done <<< "$API_REPOS" # needed to not run as pipeline and get TOTAL_COUNT


echo "$START_BACKUP_TIME" | rclone rcat "$LAST_BACKUP_TIME_FILE_PATH"
rclone delete "$RCLONE_START_BACKUP_TIME_FILE_PATH"
echo::info " "
echo::info "Processed $TOTAL_COUNT repositories";



case $OUTPUT_FORMAT in
  "$OUTPUT_FORMAT_JSON")
  cat << EOF
{
    "$METRIC_TOTAL_COUNT_NAME": "$TOTAL_COUNT",
    "$METRIC_BUNDLE_COUNT_NAME": "$BUNDLE_COUNT",
    "$METRIC_SKIPPED_NO_CHANGE_COUNT_NAME": "$SKIPPED_NO_CHANGE",
    "$METRIC_SKIPPED_EMPTY_COUNT_NAME": "$SKIPPED_EMPTY",
    "$METRIC_SKIPPED_FORK_COUNT_NAME": "$SKIPPED_FORK",
    "$METRIC_SKIPPED_PATTERN_COUNT_NAME": "$SKIPPED_PATTERN"
}
EOF
  ;;
  "$OUTPUT_FORMAT_PROM")
  # We make it short. The prefix has no space or separator.
  PREFIX="gitbackup"
  cat <<EOF
# TYPE ${PREFIX}_${METRIC_TOTAL_COUNT_NAME} counter
# HELP the total of repos processed
${PREFIX}_${METRIC_TOTAL_COUNT_NAME}{source="$GIT_SOURCE",target="$GIT_TARGET"} $TOTAL_COUNT
# TYPE ${PREFIX}_${METRIC_BUNDLE_COUNT_NAME} counter
# HELP the total number of repos bundled
${PREFIX}_${METRIC_BUNDLE_COUNT_NAME} {source="$GIT_SOURCE",target="$GIT_TARGET"} $BUNDLE_COUNT
# TYPE ${PREFIX}_${METRIC_SKIPPED_NO_CHANGE_COUNT_NAME} counter
# HELP the total number of repos skipped due to no changes since last backup
${PREFIX}_${METRIC_SKIPPED_NO_CHANGE_COUNT_NAME}{source="$GIT_SOURCE",target="$GIT_TARGET"} $SKIPPED_NO_CHANGE
# TYPE ${PREFIX}_${METRIC_SKIPPED_EMPTY_COUNT_NAME} counter
# HELP the total number of repos skipped because they were empty
${PREFIX}_${METRIC_SKIPPED_EMPTY_COUNT_NAME}{source="$GIT_SOURCE",target="$GIT_TARGET"} $SKIPPED_EMPTY
# TYPE ${PREFIX}_${METRIC_SKIPPED_FORK_COUNT_NAME} counter
# HELP the total number of repos skipped because they were a fork
${PREFIX}_${METRIC_SKIPPED_FORK_COUNT_NAME}{source="$GIT_SOURCE",target="$GIT_TARGET"} $SKIPPED_FORK
# TYPE ${PREFIX}_${METRIC_SKIPPED_PATTERN_COUNT_NAME} counter
# HELP the total number of repos skipped because they were excluded by pattern matching
${PREFIX}_${METRIC_SKIPPED_PATTERN_COUNT_NAME}{source="$GIT_SOURCE",target="$GIT_TARGET"} $SKIPPED_PATTERN
EOF
  ;;
  *)
    # We check at argument parsing
    # therefore we should never hit this point
    # but we never know
    echo::err "Output Format $OUTPUT_FORMAT not supported"
    exit 1
    ;;
esac
